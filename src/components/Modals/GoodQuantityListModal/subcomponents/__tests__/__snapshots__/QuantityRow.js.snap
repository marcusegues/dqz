// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`QuantityRow QuantityRow with topText and plusIconText props renders correctly 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Object {
        "alignItems": "center",
        "alignSelf": "center",
        "borderBottomWidth": 1,
        "borderColor": "#E0E0E1",
        "borderTopWidth": 0,
        "flexDirection": "column",
        "justifyContent": "space-around",
        "width": "95%",
      },
      Object {},
    ]
  }
>
  <View
    leftActionActivationDistance={125}
    leftActionReleaseAnimationConfig={null}
    leftActionReleaseAnimationFn={null}
    leftButtonWidth={75}
    leftButtonsActivationDistance={75}
    leftButtonsCloseReleaseAnimationConfig={null}
    leftButtonsCloseReleaseAnimationFn={null}
    leftButtonsOpenReleaseAnimationConfig={null}
    leftButtonsOpenReleaseAnimationFn={null}
    onLayout={[Function]}
    onLeftActionActivate={[Function]}
    onLeftActionComplete={[Function]}
    onLeftActionDeactivate={[Function]}
    onLeftActionRelease={[Function]}
    onLeftButtonsActivate={[Function]}
    onLeftButtonsCloseComplete={[Function]}
    onLeftButtonsCloseRelease={[Function]}
    onLeftButtonsDeactivate={[Function]}
    onLeftButtonsOpenComplete={[Function]}
    onLeftButtonsOpenRelease={[Function]}
    onMoveShouldSetResponder={[Function]}
    onMoveShouldSetResponderCapture={[Function]}
    onPanAnimatedValueRef={[Function]}
    onRef={[Function]}
    onResponderEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderStart={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onRightActionActivate={[Function]}
    onRightActionComplete={[Function]}
    onRightActionDeactivate={[Function]}
    onRightActionRelease={[Function]}
    onRightButtonsActivate={[Function]}
    onRightButtonsCloseComplete={[Function]}
    onRightButtonsCloseRelease={[Function]}
    onRightButtonsDeactivate={[Function]}
    onRightButtonsOpenComplete={[Function]}
    onRightButtonsOpenRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    onSwipeComplete={[Function]}
    onSwipeMove={[Function]}
    onSwipeRelease={[Function]}
    onSwipeStart={[Function]}
    rightActionActivationDistance={125}
    rightActionReleaseAnimationConfig={null}
    rightActionReleaseAnimationFn={null}
    rightButtonWidth={90}
    rightButtonsActivationDistance={75}
    rightButtonsCloseReleaseAnimationConfig={null}
    rightButtonsCloseReleaseAnimationFn={null}
    rightButtonsOpenReleaseAnimationConfig={null}
    rightButtonsOpenReleaseAnimationFn={null}
    style={
      Array [
        Object {
          "flexDirection": "row",
        },
        Object {
          "overflow": "hidden",
        },
      ]
    }
    swipeReleaseAnimationConfig={
      Object {
        "duration": 250,
        "easing": [Function],
        "toValue": Object {
          "x": 0,
          "y": 0,
        },
      }
    }
    swipeReleaseAnimationFn={[Function]}
    swipeStartMinDistance={15}
  >
    <View
      collapsable={undefined}
      style={
        Object {
          "flex": 1,
          "transform": Array [
            Object {
              "translateX": 0.5,
            },
          ],
        }
      }
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hitSlop={undefined}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
            "paddingHorizontal": 12,
            "paddingVertical": 8,
          }
        }
        testID={undefined}
      >
        <View
          style={
            Object {
              "flex": 1,
            }
          }
        >
          <View
            style={Object {}}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
              style={
                Object {
                  "color": "#24253D",
                  "fontFamily": "roboto_medium",
                  "fontSize": 22,
                }
              }
            >
              6.000 
            </Text>
          </View>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
            style={
              Object {
                "color": "#898989",
                "fontFamily": "roboto_regular",
                "fontSize": 18.857142857142858,
              }
            }
          >
            
          </Text>
        </View>
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          />
        </View>
      </View>
    </View>
    <View
      collapsable={undefined}
      style={
        Object {
          "marginRight": -0,
          "transform": Array [
            Object {
              "translateX": 0.5,
            },
          ],
          "width": 0,
        }
      }
    >
      <View
        collapsable={undefined}
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
            "transform": Array [
              Object {
                "translateX": 0,
              },
            ],
            "width": 0,
          }
        }
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "flex-start",
              "backgroundColor": "#DC0018",
              "flex": 1,
              "justifyContent": "center",
              "paddingLeft": 30,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          />
        </View>
      </View>
    </View>
  </View>
</View>
`;
